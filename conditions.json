[
    ["Dot", "matcher(size, ONE)"],
    ["VerticalLine", "fork(both, vline, compose(rbind(greater, ONE), size))"],
    ["HorizontalLine", "fork(both, hline, compose(rbind(greater, ONE), size))"],
    ["DiagonalLine", "fork(both, fork(both, compose(rbind(greater, ONE), height), compose(rbind(greater, ONE), width)), fork(equality, toindices, fork(connect, ulcorner, lrcorner)))"],
    ["CounterdiagonalLine", "fork(both, fork(both, compose(rbind(greater, ONE), height), compose(rbind(greater, ONE), width)), fork(equality, toindices, fork(connect, urcorner, llcorner)))"],
    ["Square", "square"],
    ["Rectangle", "fork(equality, size, fork(multiply, height, width))"],
    ["Box", "fork(both, fork(both, compose(rbind(greater, TWO), height), compose(rbind(greater, TWO), width)), fork(equality, toindices, box))"],
    ["SameHeightAndWidth", "fork(equality, height, width)"],
    ["VerticallySymmetric", "fork(equality, compose(toindices, vmirror), toindices)"],
    ["HorizontallySymmetric", "fork(equality, compose(toindices, hmirror), toindices)"],
    ["DiagonallySymmetric", "fork(equality, compose(toindices, dmirror), toindices)"],
    ["CounterdiagonallySymmetric", "fork(equality, compose(toindices, cmirror), toindices)"],
    ["Symmetric", "fork(either, fork(either, fork(equality, compose(toindices, dmirror), toindices), fork(equality, compose(toindices, cmirror), toindices)), fork(either, fork(equality, compose(toindices, vmirror), toindices), fork(equality, compose(toindices, hmirror), toindices)))"],
    ["FullySymmetric", "fork(both, fork(both, fork(equality, compose(toindices, dmirror), toindices), fork(equality, compose(toindices, cmirror), toindices)), fork(both, fork(equality, compose(toindices, vmirror), toindices), fork(equality, compose(toindices, hmirror), toindices)))"],
    ["HigherThanWide", "portrait"],
    ["WiderThanHigh", "fork(greater, width, height)"],
    ["OfTwoCells", "matcher(size, TWO)"],
    ["OfThreeCells", "matcher(size, THREE)"],
    ["OfFourCells", "matcher(size, FOUR)"],
    ["OfTwoWidth", "matcher(width, TWO)"],
    ["OfThreeWidth", "matcher(width, THREE)"],
    ["OfFourWidth", "matcher(width, FOUR)"],
    ["OfTwoHeight", "matcher(height, TWO)"],
    ["OfThreeHeight", "matcher(height, THREE)"],
    ["OfFourHeight", "matcher(height, FOUR)"],
    ["OfTwoByTwoShape", "matcher(shape, astuple(TWO, TWO))"],
    ["OfThreeByThreeShape", "matcher(shape, astuple(THREE, THREE))"],
    ["OfFourByFourShape", "matcher(shape, astuple(FOUR, FOUR))"],
    ["Sparse", "chain(positive, size, fork(sfilter, identity, chain(rbind(rbind(chain, last), dneighbors), lbind(lbind(chain, rbind(equality, ZERO)), size), compose(lbind(lbind, intersection), toindices))))"],
    ["Dense", "compose(flip, chain(positive, size, fork(sfilter, identity, chain(rbind(rbind(chain, last), dneighbors), lbind(lbind(chain, rbind(equality, ZERO)), size), compose(lbind(lbind, intersection), toindices)))))"],
    ["FullySparse", "fork(equality, size, compose(size, fork(sfilter, identity, compose(lbind(compose, rbind(equality, ZERO)), compose(rbind(lbind(chain, size), compose(dneighbors, last)), compose(lbind(lbind, intersection), toindices))))))"],
    ["HasHole", "chain(positive, size, fork(sfilter, delta, compose(lbind(compose, rbind(equality, FOUR)), compose(rbind(lbind(chain, size), dneighbors), compose(lbind(lbind, intersection), toindices)))))"],
    ["HasTwoHoles", "compose(matcher(size, TWO), fork(sfilter, delta, compose(lbind(compose, rbind(equality, FOUR)), compose(rbind(lbind(chain, size), dneighbors), compose(lbind(lbind, intersection), toindices)))))"],
    ["TwoLines", "fork(both, chain(rbind(equality, TWO), size, compose(frontiers, fork(paint, compose(lbind(canvas, NEG_ONE), shape), normalize))), fork(equality, compose(normalize, toindices), chain(toindices, merge, compose(frontiers, fork(paint, compose(lbind(canvas, NEG_ONE), shape), normalize)))))"],
    ["CrossLike", "fork(both, fork(both, matcher(compose(size, compose(frontiers, fork(paint, compose(lbind(canvas, NEG_ONE), shape), normalize))), TWO), fork(equality, compose(normalize, toindices), chain(toindices, merge, compose(frontiers, fork(paint, compose(lbind(canvas, NEG_ONE), shape), normalize))))), compose(rbind(equality, FOUR), fork(valmax, toindices, compose(rbind(lbind(chain, size), dneighbors), compose(lbind(lbind, intersection), toindices)))))"],
    ["TShaped", "fork(both, fork(both, matcher(compose(size, compose(frontiers, fork(paint, compose(lbind(canvas, NEG_ONE), shape), normalize))), TWO), fork(equality, compose(normalize, toindices), chain(toindices, merge, compose(frontiers, fork(paint, compose(lbind(canvas, NEG_ONE), shape), normalize))))), compose(rbind(equality, THREE), fork(valmax, toindices, compose(rbind(lbind(chain, size), dneighbors), compose(lbind(lbind, intersection), toindices)))))"],
    ["LShaped", "fork(both, fork(both, matcher(compose(size, compose(frontiers, fork(paint, compose(lbind(canvas, NEG_ONE), shape), normalize))), TWO), fork(equality, compose(normalize, toindices), chain(toindices, merge, compose(frontiers, fork(paint, compose(lbind(canvas, NEG_ONE), shape), normalize))))), compose(rbind(equality, TWO), fork(valmax, toindices, compose(rbind(lbind(chain, size), dneighbors), compose(lbind(lbind, intersection), toindices)))))"],
    ["TwoObjectParts", "matcher(chain(fork(subtract, size, compose(size, rbind(colorfilter, NEG_ONE))), rbind(rbind(rbind(objects, F), F), T), fork(paint, compose(lbind(canvas, NEG_ONE), shape), normalize)), TWO)"],
    ["ThreeObjectParts", "matcher(chain(fork(subtract, size, compose(size, rbind(colorfilter, NEG_ONE))), rbind(rbind(rbind(objects, F), F), T), fork(paint, compose(lbind(canvas, NEG_ONE), shape), normalize)), THREE)"],
    ["FourObjectParts", "matcher(chain(fork(subtract, size, compose(size, rbind(colorfilter, NEG_ONE))), rbind(rbind(rbind(objects, F), F), T), fork(paint, compose(lbind(canvas, NEG_ONE), shape), normalize)), FOUR)"],
    ["OnlyOnBox", "fork(both, matcher(compose(size, fork(difference, toindices, box)), ZERO), fork(both, compose(rbind(greater, TWO), height), compose(rbind(greater, TWO), width)))"],
    ["NoCornerOccupied", "fork(equality, size, compose(size, fork(difference, toindices, corners)))"],
    ["AllCornersOccupied", "matcher(compose(size, fork(intersection, corners, toindices)), FOUR)"],
    ["OutlineFullyOccupied", "fork(equality, box, fork(intersection, box, toindices))"],
    ["OutlineFullyOccupiedOneSizeHole", "fork(both, fork(equality, box, fork(intersection, box, toindices)), fork(equality, fork(multiply, height, width), compose(increment, size)))"],
    ["OutlineFullyOccupiedTwoSizeHole", "fork(both, fork(equality, box, fork(intersection, box, toindices)), fork(equality, fork(multiply, height, width), chain(increment, increment, size)))"],
    ["OutlineFullyOccupiedThreeSizeHole", "fork(both, fork(equality, box, fork(intersection, box, toindices)), fork(equality, fork(multiply, height, width), compose(power(increment, THREE), size)))"],
    ["OnlyCornersOnBox", "fork(equality, corners, fork(intersection, toindices, box))"],
    ["AllRowsSameNumCells", "matcher(chain(compose(size, dedupe), lbind(apply, rbind(colorcount, NEG_ONE)), fork(vsplit, fork(paint, compose(lbind(canvas, NEG_ONE), shape), normalize), height)), ONE)"],
    ["AllColsSameNumCells", "matcher(chain(compose(size, dedupe), lbind(apply, rbind(colorcount, NEG_ONE)), fork(vsplit, compose(rot90, fork(paint, compose(lbind(canvas, NEG_ONE), shape), normalize)), width)), ONE)"]
]
